@using Microsoft.AspNetCore.Http
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IAuthorizationService AuthorizationService
<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">
        <AuthorizeView>
            Hello @context.User.Identity.Name
        </AuthorizeView>
    </a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">

    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-dashboard" aria-hidden="true"></span> Dashboard
            </NavLink>
        </li>
        <hr>
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="employees">
                <span class="oi oi-people" aria-hidden="true"></span> Employees
            </NavLink>
        </li>
        <AuthorizeView Roles="admin">
            <Authorized>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="devices">
                        <span class="oi oi-phone" aria-hidden="true"></span> Devices
                    </NavLink>
                </li>
            </Authorized>
        </AuthorizeView>
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    public async Task Login()
    {
        var user = (await authenticationStateTask).User;
        await AuthorizationService.AuthorizeAsync(user, "admin-policy");
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

}